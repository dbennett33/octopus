// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Octopus.EF.Data;

#nullable disable

namespace Octopus.EF.Migrations
{
    [DbContext(typeof(OctopusDbContext))]
    [Migration("20240610150732_InstallInfoUpdates")]
    partial class InstallInfoUpdates
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Octopus.EF.Data.Entities.Coach", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Photo")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Coaches");
                });

            modelBuilder.Entity("Octopus.EF.Data.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Flag")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Octopus.EF.Data.Entities.Coverage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Events")
                        .HasColumnType("bit");

                    b.Property<bool>("FixtureStats")
                        .HasColumnType("bit");

                    b.Property<bool>("Injuries")
                        .HasColumnType("bit");

                    b.Property<bool>("Lineups")
                        .HasColumnType("bit");

                    b.Property<bool>("Odds")
                        .HasColumnType("bit");

                    b.Property<bool>("PlayerStats")
                        .HasColumnType("bit");

                    b.Property<bool>("Players")
                        .HasColumnType("bit");

                    b.Property<bool>("Predictions")
                        .HasColumnType("bit");

                    b.Property<int>("SeasonId")
                        .HasColumnType("int");

                    b.Property<bool>("Standings")
                        .HasColumnType("bit");

                    b.Property<bool>("TopAssists")
                        .HasColumnType("bit");

                    b.Property<bool>("TopCards")
                        .HasColumnType("bit");

                    b.Property<bool>("TopScorers")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("SeasonId")
                        .IsUnique();

                    b.ToTable("Coverage");
                });

            modelBuilder.Entity("Octopus.EF.Data.Entities.Fixture", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("AwayTeamId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("GoalsAwayTeam")
                        .HasColumnType("int");

                    b.Property<int>("GoalsAwayTeamExtraTime")
                        .HasColumnType("int");

                    b.Property<int>("GoalsAwayTeamFullTime")
                        .HasColumnType("int");

                    b.Property<int>("GoalsAwayTeamHalfTime")
                        .HasColumnType("int");

                    b.Property<int>("GoalsAwayTeamPenalty")
                        .HasColumnType("int");

                    b.Property<int>("GoalsHomeTeam")
                        .HasColumnType("int");

                    b.Property<int>("GoalsHomeTeamExtraTime")
                        .HasColumnType("int");

                    b.Property<int>("GoalsHomeTeamFullTime")
                        .HasColumnType("int");

                    b.Property<int>("GoalsHomeTeamHalfTime")
                        .HasColumnType("int");

                    b.Property<int>("GoalsHomeTeamPenalty")
                        .HasColumnType("int");

                    b.Property<int>("HomeTeamId")
                        .HasColumnType("int");

                    b.Property<int>("LeagueId")
                        .HasColumnType("int");

                    b.Property<string>("Referee")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Round")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("SeasonId")
                        .HasColumnType("int");

                    b.Property<string>("StatusLong")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("StatusShort")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("TimeElapsed")
                        .HasColumnType("int");

                    b.Property<string>("Timestamp")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Timezone")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("VenueId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AwayTeamId");

                    b.HasIndex("HomeTeamId");

                    b.HasIndex("LeagueId");

                    b.HasIndex("SeasonId");

                    b.HasIndex("VenueId");

                    b.ToTable("Fixtures");
                });

            modelBuilder.Entity("Octopus.EF.Data.Entities.FixtureLineup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CoachId")
                        .HasColumnType("int");

                    b.Property<string>("Formation")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CoachId");

                    b.HasIndex("TeamId");

                    b.ToTable("FixtureLineups");
                });

            modelBuilder.Entity("Octopus.EF.Data.Entities.FixtureStats", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BallPossession")
                        .HasColumnType("int");

                    b.Property<int>("BlockedShots")
                        .HasColumnType("int");

                    b.Property<int>("CornerKicks")
                        .HasColumnType("int");

                    b.Property<int>("FixtureId")
                        .HasColumnType("int");

                    b.Property<int>("Fouls")
                        .HasColumnType("int");

                    b.Property<int>("GoalkeeperSaves")
                        .HasColumnType("int");

                    b.Property<int>("Offsides")
                        .HasColumnType("int");

                    b.Property<int>("PassesAccurate")
                        .HasColumnType("int");

                    b.Property<int>("PassesPercentage")
                        .HasColumnType("int");

                    b.Property<int>("RedCards")
                        .HasColumnType("int");

                    b.Property<int>("ShotsInsideBox")
                        .HasColumnType("int");

                    b.Property<int>("ShotsOffGoal")
                        .HasColumnType("int");

                    b.Property<int>("ShotsOnGoal")
                        .HasColumnType("int");

                    b.Property<int>("ShotsOutsideBox")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<int>("TotalPasses")
                        .HasColumnType("int");

                    b.Property<int>("TotalShots")
                        .HasColumnType("int");

                    b.Property<int>("YellowCards")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FixtureId")
                        .IsUnique();

                    b.HasIndex("TeamId");

                    b.ToTable("FixtureStats");
                });

            modelBuilder.Entity("Octopus.EF.Data.Entities.InstallInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("CountriesInstalled")
                        .HasColumnType("bit")
                        .HasColumnName("CountriesInstalled");

                    b.Property<string>("EnabledEntitiesJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InstallDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("InstallDate");

                    b.Property<bool>("IsComplete")
                        .HasColumnType("bit");

                    b.Property<bool>("LeaguesInstalled")
                        .HasColumnType("bit")
                        .HasColumnName("LeaguesInstalled");

                    b.Property<int>("SystemSettingsId")
                        .HasColumnType("int")
                        .HasColumnName("SystemSettingsId");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Version");

                    b.HasKey("Id");

                    b.HasIndex("SystemSettingsId");

                    b.ToTable("InstallInfo", (string)null);
                });

            modelBuilder.Entity("Octopus.EF.Data.Entities.League", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Leagues");
                });

            modelBuilder.Entity("Octopus.EF.Data.Entities.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Height")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("Injured")
                        .HasColumnType("bit");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Photo")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Weight")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("Octopus.EF.Data.Entities.PlayerStatistics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("LeagueId")
                        .HasColumnType("int");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LeagueId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("TeamId");

                    b.ToTable("PlayerStatistics");
                });

            modelBuilder.Entity("Octopus.EF.Data.Entities.Season", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Current")
                        .HasColumnType("bit");

                    b.Property<string>("EndDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LeagueId")
                        .HasColumnType("int");

                    b.Property<string>("StartDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Year")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.HasKey("Id");

                    b.HasIndex("LeagueId");

                    b.ToTable("Seasons");
                });

            modelBuilder.Entity("Octopus.EF.Data.Entities.StartXI", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FixtureLineupId")
                        .HasColumnType("int");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FixtureLineupId");

                    b.HasIndex("PlayerId");

                    b.ToTable("StartXIs");
                });

            modelBuilder.Entity("Octopus.EF.Data.Entities.StatsFormation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Formation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Played")
                        .HasColumnType("int");

                    b.Property<int>("TeamStatsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TeamStatsId");

                    b.ToTable("StatsFormations");
                });

            modelBuilder.Entity("Octopus.EF.Data.Entities.Substitute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FixtureLineupId")
                        .HasColumnType("int");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FixtureLineupId");

                    b.HasIndex("PlayerId");

                    b.ToTable("Substitutes");
                });

            modelBuilder.Entity("Octopus.EF.Data.Entities.SystemSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CurrentVersion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool?>("Installed")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("SystemSettings", (string)null);
                });

            modelBuilder.Entity("Octopus.EF.Data.Entities.Team", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Founded")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<bool>("IsNationalTeam")
                        .HasColumnType("bit");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("VenueId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VenueId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("Octopus.EF.Data.Entities.TeamStats", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Form")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("LeagueId")
                        .HasColumnType("int");

                    b.Property<int>("SeasonId")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LeagueId");

                    b.HasIndex("SeasonId");

                    b.HasIndex("TeamId");

                    b.ToTable("TeamStats");
                });

            modelBuilder.Entity("Octopus.EF.Data.Entities.Venue", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Capacity")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Surface")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Venues");
                });

            modelBuilder.Entity("Octopus.EF.Data.Entities.Coverage", b =>
                {
                    b.HasOne("Octopus.EF.Data.Entities.Season", "Season")
                        .WithOne("SeasonCoverage")
                        .HasForeignKey("Octopus.EF.Data.Entities.Coverage", "SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Season");
                });

            modelBuilder.Entity("Octopus.EF.Data.Entities.Fixture", b =>
                {
                    b.HasOne("Octopus.EF.Data.Entities.Team", "AwayTeam")
                        .WithMany()
                        .HasForeignKey("AwayTeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Octopus.EF.Data.Entities.Team", "HomeTeam")
                        .WithMany()
                        .HasForeignKey("HomeTeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Octopus.EF.Data.Entities.League", "League")
                        .WithMany()
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Octopus.EF.Data.Entities.Season", "Season")
                        .WithMany()
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Octopus.EF.Data.Entities.Venue", "Venue")
                        .WithMany()
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AwayTeam");

                    b.Navigation("HomeTeam");

                    b.Navigation("League");

                    b.Navigation("Season");

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("Octopus.EF.Data.Entities.FixtureLineup", b =>
                {
                    b.HasOne("Octopus.EF.Data.Entities.Coach", "Coach")
                        .WithMany()
                        .HasForeignKey("CoachId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Octopus.EF.Data.Entities.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Coach");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Octopus.EF.Data.Entities.FixtureStats", b =>
                {
                    b.HasOne("Octopus.EF.Data.Entities.Fixture", "Fixture")
                        .WithOne("Stats")
                        .HasForeignKey("Octopus.EF.Data.Entities.FixtureStats", "FixtureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Octopus.EF.Data.Entities.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Fixture");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Octopus.EF.Data.Entities.InstallInfo", b =>
                {
                    b.HasOne("Octopus.EF.Data.Entities.SystemSettings", "SystemSettings")
                        .WithMany()
                        .HasForeignKey("SystemSettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SystemSettings");
                });

            modelBuilder.Entity("Octopus.EF.Data.Entities.League", b =>
                {
                    b.HasOne("Octopus.EF.Data.Entities.Country", "Country")
                        .WithMany("Leagues")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Octopus.EF.Data.Entities.PlayerStatistics", b =>
                {
                    b.HasOne("Octopus.EF.Data.Entities.League", "League")
                        .WithMany()
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Octopus.EF.Data.Entities.Player", "Player")
                        .WithMany("Statistics")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Octopus.EF.Data.Entities.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("Octopus.EF.Data.Entities.Cards", "Cards", b1 =>
                        {
                            b1.Property<int>("PlayerStatisticsId")
                                .HasColumnType("int");

                            b1.Property<int>("Red")
                                .HasColumnType("int");

                            b1.Property<int>("Yellow")
                                .HasColumnType("int");

                            b1.Property<int>("YellowRed")
                                .HasColumnType("int");

                            b1.HasKey("PlayerStatisticsId");

                            b1.ToTable("PlayerStatistics");

                            b1.WithOwner()
                                .HasForeignKey("PlayerStatisticsId");
                        });

                    b.OwnsOne("Octopus.EF.Data.Entities.Dribbles", "Dribbles", b1 =>
                        {
                            b1.Property<int>("PlayerStatisticsId")
                                .HasColumnType("int");

                            b1.Property<int>("Attempts")
                                .HasColumnType("int");

                            b1.Property<int?>("Past")
                                .HasColumnType("int");

                            b1.Property<int>("Success")
                                .HasColumnType("int");

                            b1.HasKey("PlayerStatisticsId");

                            b1.ToTable("PlayerStatistics");

                            b1.WithOwner()
                                .HasForeignKey("PlayerStatisticsId");
                        });

                    b.OwnsOne("Octopus.EF.Data.Entities.Duels", "Duels", b1 =>
                        {
                            b1.Property<int>("PlayerStatisticsId")
                                .HasColumnType("int");

                            b1.Property<int?>("Total")
                                .HasColumnType("int");

                            b1.Property<int?>("Won")
                                .HasColumnType("int");

                            b1.HasKey("PlayerStatisticsId");

                            b1.ToTable("PlayerStatistics");

                            b1.WithOwner()
                                .HasForeignKey("PlayerStatisticsId");
                        });

                    b.OwnsOne("Octopus.EF.Data.Entities.Fouls", "Fouls", b1 =>
                        {
                            b1.Property<int>("PlayerStatisticsId")
                                .HasColumnType("int");

                            b1.Property<int>("Committed")
                                .HasColumnType("int");

                            b1.Property<int>("Drawn")
                                .HasColumnType("int");

                            b1.HasKey("PlayerStatisticsId");

                            b1.ToTable("PlayerStatistics");

                            b1.WithOwner()
                                .HasForeignKey("PlayerStatisticsId");
                        });

                    b.OwnsOne("Octopus.EF.Data.Entities.Games", "Games", b1 =>
                        {
                            b1.Property<int>("PlayerStatisticsId")
                                .HasColumnType("int");

                            b1.Property<int>("Appearances")
                                .HasColumnType("int");

                            b1.Property<bool>("Captain")
                                .HasColumnType("bit");

                            b1.Property<int>("Lineups")
                                .HasColumnType("int");

                            b1.Property<int>("Minutes")
                                .HasColumnType("int");

                            b1.Property<int?>("Number")
                                .HasColumnType("int");

                            b1.Property<string>("Position")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Rating")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PlayerStatisticsId");

                            b1.ToTable("PlayerStatistics");

                            b1.WithOwner()
                                .HasForeignKey("PlayerStatisticsId");
                        });

                    b.OwnsOne("Octopus.EF.Data.Entities.Goals", "Goals", b1 =>
                        {
                            b1.Property<int>("PlayerStatisticsId")
                                .HasColumnType("int");

                            b1.Property<int>("Assists")
                                .HasColumnType("int");

                            b1.Property<int?>("Conceded")
                                .HasColumnType("int");

                            b1.Property<int>("Saves")
                                .HasColumnType("int");

                            b1.Property<int>("Total")
                                .HasColumnType("int");

                            b1.HasKey("PlayerStatisticsId");

                            b1.ToTable("PlayerStatistics");

                            b1.WithOwner()
                                .HasForeignKey("PlayerStatisticsId");
                        });

                    b.OwnsOne("Octopus.EF.Data.Entities.Passes", "Passes", b1 =>
                        {
                            b1.Property<int>("PlayerStatisticsId")
                                .HasColumnType("int");

                            b1.Property<int>("Accuracy")
                                .HasColumnType("int");

                            b1.Property<int>("Key")
                                .HasColumnType("int");

                            b1.Property<int>("Total")
                                .HasColumnType("int");

                            b1.HasKey("PlayerStatisticsId");

                            b1.ToTable("PlayerStatistics");

                            b1.WithOwner()
                                .HasForeignKey("PlayerStatisticsId");
                        });

                    b.OwnsOne("Octopus.EF.Data.Entities.Penalty", "Penalty", b1 =>
                        {
                            b1.Property<int>("PlayerStatisticsId")
                                .HasColumnType("int");

                            b1.Property<int?>("Commited")
                                .HasColumnType("int");

                            b1.Property<int>("Missed")
                                .HasColumnType("int");

                            b1.Property<int?>("Saved")
                                .HasColumnType("int");

                            b1.Property<int>("Scored")
                                .HasColumnType("int");

                            b1.Property<int>("Won")
                                .HasColumnType("int");

                            b1.HasKey("PlayerStatisticsId");

                            b1.ToTable("PlayerStatistics");

                            b1.WithOwner()
                                .HasForeignKey("PlayerStatisticsId");
                        });

                    b.OwnsOne("Octopus.EF.Data.Entities.Shots", "Shots", b1 =>
                        {
                            b1.Property<int>("PlayerStatisticsId")
                                .HasColumnType("int");

                            b1.Property<int>("On")
                                .HasColumnType("int");

                            b1.Property<int>("Total")
                                .HasColumnType("int");

                            b1.HasKey("PlayerStatisticsId");

                            b1.ToTable("PlayerStatistics");

                            b1.WithOwner()
                                .HasForeignKey("PlayerStatisticsId");
                        });

                    b.OwnsOne("Octopus.EF.Data.Entities.Substitutes", "Substitutes", b1 =>
                        {
                            b1.Property<int>("PlayerStatisticsId")
                                .HasColumnType("int");

                            b1.Property<int>("Bench")
                                .HasColumnType("int");

                            b1.Property<int>("In")
                                .HasColumnType("int");

                            b1.Property<int>("Out")
                                .HasColumnType("int");

                            b1.HasKey("PlayerStatisticsId");

                            b1.ToTable("PlayerStatistics");

                            b1.WithOwner()
                                .HasForeignKey("PlayerStatisticsId");
                        });

                    b.OwnsOne("Octopus.EF.Data.Entities.Tackles", "Tackles", b1 =>
                        {
                            b1.Property<int>("PlayerStatisticsId")
                                .HasColumnType("int");

                            b1.Property<int>("Blocks")
                                .HasColumnType("int");

                            b1.Property<int>("Interceptions")
                                .HasColumnType("int");

                            b1.Property<int>("Total")
                                .HasColumnType("int");

                            b1.HasKey("PlayerStatisticsId");

                            b1.ToTable("PlayerStatistics");

                            b1.WithOwner()
                                .HasForeignKey("PlayerStatisticsId");
                        });

                    b.Navigation("Cards")
                        .IsRequired();

                    b.Navigation("Dribbles")
                        .IsRequired();

                    b.Navigation("Duels")
                        .IsRequired();

                    b.Navigation("Fouls")
                        .IsRequired();

                    b.Navigation("Games")
                        .IsRequired();

                    b.Navigation("Goals")
                        .IsRequired();

                    b.Navigation("League");

                    b.Navigation("Passes")
                        .IsRequired();

                    b.Navigation("Penalty")
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("Shots")
                        .IsRequired();

                    b.Navigation("Substitutes")
                        .IsRequired();

                    b.Navigation("Tackles")
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Octopus.EF.Data.Entities.Season", b =>
                {
                    b.HasOne("Octopus.EF.Data.Entities.League", "League")
                        .WithMany("Seasons")
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("League");
                });

            modelBuilder.Entity("Octopus.EF.Data.Entities.StartXI", b =>
                {
                    b.HasOne("Octopus.EF.Data.Entities.FixtureLineup", "FixtureLineup")
                        .WithMany("StartXI")
                        .HasForeignKey("FixtureLineupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Octopus.EF.Data.Entities.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FixtureLineup");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Octopus.EF.Data.Entities.StatsFormation", b =>
                {
                    b.HasOne("Octopus.EF.Data.Entities.TeamStats", null)
                        .WithMany("Formations")
                        .HasForeignKey("TeamStatsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Octopus.EF.Data.Entities.Substitute", b =>
                {
                    b.HasOne("Octopus.EF.Data.Entities.FixtureLineup", "FixtureLineup")
                        .WithMany("Substitutes")
                        .HasForeignKey("FixtureLineupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Octopus.EF.Data.Entities.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FixtureLineup");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Octopus.EF.Data.Entities.Team", b =>
                {
                    b.HasOne("Octopus.EF.Data.Entities.Venue", "Venue")
                        .WithMany()
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("Octopus.EF.Data.Entities.TeamStats", b =>
                {
                    b.HasOne("Octopus.EF.Data.Entities.League", "League")
                        .WithMany()
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Octopus.EF.Data.Entities.Season", "Season")
                        .WithMany()
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Octopus.EF.Data.Entities.Team", "Team")
                        .WithMany("TeamStats")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Octopus.EF.Data.Entities.StatsBiggest", "Biggest", b1 =>
                        {
                            b1.Property<int>("TeamStatsId")
                                .HasColumnType("int");

                            b1.Property<string>("BiggestAwayLoss")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.Property<string>("BiggestAwayWin")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.Property<int>("BiggestGoalsConcededAway")
                                .HasColumnType("int");

                            b1.Property<int>("BiggestGoalsConcededHome")
                                .HasColumnType("int");

                            b1.Property<int>("BiggestGoalsScoredAway")
                                .HasColumnType("int");

                            b1.Property<int>("BiggestGoalsScoredHome")
                                .HasColumnType("int");

                            b1.Property<string>("BiggestHomeLoss")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.Property<string>("BiggestHomeWin")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.Property<int>("Id")
                                .HasColumnType("int");

                            b1.Property<int>("StreakDraws")
                                .HasColumnType("int");

                            b1.Property<int>("StreakLosses")
                                .HasColumnType("int");

                            b1.Property<int>("StreakWins")
                                .HasColumnType("int");

                            b1.HasKey("TeamStatsId");

                            b1.ToTable("TeamStats");

                            b1.WithOwner("TeamStats")
                                .HasForeignKey("TeamStatsId");

                            b1.Navigation("TeamStats");
                        });

                    b.OwnsOne("Octopus.EF.Data.Entities.StatsGoals", "Goals", b1 =>
                        {
                            b1.Property<int>("TeamStatsId")
                                .HasColumnType("int");

                            b1.Property<decimal>("AwayAverage")
                                .HasPrecision(5, 4)
                                .HasColumnType("decimal(5,4)");

                            b1.Property<int>("AwayTotal")
                                .HasColumnType("int");

                            b1.Property<decimal>("HomeAverage")
                                .HasPrecision(5, 4)
                                .HasColumnType("decimal(5,4)");

                            b1.Property<int>("HomeTotal")
                                .HasColumnType("int");

                            b1.Property<int>("Total")
                                .HasColumnType("int");

                            b1.Property<decimal>("TotalAverage")
                                .HasPrecision(5, 4)
                                .HasColumnType("decimal(5,4)");

                            b1.HasKey("TeamStatsId");

                            b1.ToTable("TeamStats");

                            b1.WithOwner()
                                .HasForeignKey("TeamStatsId");
                        });

                    b.OwnsOne("Octopus.EF.Data.Entities.StatsPenalties", "Penalties", b1 =>
                        {
                            b1.Property<int>("TeamStatsId")
                                .HasColumnType("int");

                            b1.Property<int>("Id")
                                .HasColumnType("int");

                            b1.Property<int>("Total")
                                .HasColumnType("int");

                            b1.HasKey("TeamStatsId");

                            b1.ToTable("TeamStats");

                            b1.WithOwner()
                                .HasForeignKey("TeamStatsId");

                            b1.OwnsOne("Octopus.EF.Data.Entities.StatsPercentage", "Missed", b2 =>
                                {
                                    b2.Property<int>("StatsPenaltiesTeamStatsId")
                                        .HasColumnType("int");

                                    b2.Property<int>("Id")
                                        .HasColumnType("int");

                                    b2.Property<int>("Percentage")
                                        .HasColumnType("int");

                                    b2.Property<int>("Total")
                                        .HasColumnType("int");

                                    b2.HasKey("StatsPenaltiesTeamStatsId");

                                    b2.ToTable("TeamStats");

                                    b2.WithOwner()
                                        .HasForeignKey("StatsPenaltiesTeamStatsId");
                                });

                            b1.OwnsOne("Octopus.EF.Data.Entities.StatsPercentage", "Scored", b2 =>
                                {
                                    b2.Property<int>("StatsPenaltiesTeamStatsId")
                                        .HasColumnType("int");

                                    b2.Property<int>("Id")
                                        .HasColumnType("int");

                                    b2.Property<int>("Percentage")
                                        .HasColumnType("int");

                                    b2.Property<int>("Total")
                                        .HasColumnType("int");

                                    b2.HasKey("StatsPenaltiesTeamStatsId");

                                    b2.ToTable("TeamStats");

                                    b2.WithOwner()
                                        .HasForeignKey("StatsPenaltiesTeamStatsId");
                                });

                            b1.Navigation("Missed")
                                .IsRequired();

                            b1.Navigation("Scored")
                                .IsRequired();
                        });

                    b.OwnsOne("Octopus.EF.Data.Entities.StatsHomeAwayTotal", "CleanSheets", b1 =>
                        {
                            b1.Property<int>("TeamStatsId")
                                .HasColumnType("int");

                            b1.Property<int>("Away")
                                .HasColumnType("int");

                            b1.Property<int>("Home")
                                .HasColumnType("int");

                            b1.Property<int>("Id")
                                .HasColumnType("int");

                            b1.Property<int>("Total")
                                .HasColumnType("int");

                            b1.HasKey("TeamStatsId");

                            b1.ToTable("TeamStats");

                            b1.WithOwner()
                                .HasForeignKey("TeamStatsId");
                        });

                    b.OwnsOne("Octopus.EF.Data.Entities.StatsHomeAwayTotal", "Draws", b1 =>
                        {
                            b1.Property<int>("TeamStatsId")
                                .HasColumnType("int");

                            b1.Property<int>("Away")
                                .HasColumnType("int");

                            b1.Property<int>("Home")
                                .HasColumnType("int");

                            b1.Property<int>("Id")
                                .HasColumnType("int");

                            b1.Property<int>("Total")
                                .HasColumnType("int");

                            b1.HasKey("TeamStatsId");

                            b1.ToTable("TeamStats");

                            b1.WithOwner()
                                .HasForeignKey("TeamStatsId");
                        });

                    b.OwnsOne("Octopus.EF.Data.Entities.StatsHomeAwayTotal", "FailedToScore", b1 =>
                        {
                            b1.Property<int>("TeamStatsId")
                                .HasColumnType("int");

                            b1.Property<int>("Away")
                                .HasColumnType("int");

                            b1.Property<int>("Home")
                                .HasColumnType("int");

                            b1.Property<int>("Id")
                                .HasColumnType("int");

                            b1.Property<int>("Total")
                                .HasColumnType("int");

                            b1.HasKey("TeamStatsId");

                            b1.ToTable("TeamStats");

                            b1.WithOwner()
                                .HasForeignKey("TeamStatsId");
                        });

                    b.OwnsOne("Octopus.EF.Data.Entities.StatsHomeAwayTotal", "Losses", b1 =>
                        {
                            b1.Property<int>("TeamStatsId")
                                .HasColumnType("int");

                            b1.Property<int>("Away")
                                .HasColumnType("int");

                            b1.Property<int>("Home")
                                .HasColumnType("int");

                            b1.Property<int>("Id")
                                .HasColumnType("int");

                            b1.Property<int>("Total")
                                .HasColumnType("int");

                            b1.HasKey("TeamStatsId");

                            b1.ToTable("TeamStats");

                            b1.WithOwner()
                                .HasForeignKey("TeamStatsId");
                        });

                    b.OwnsOne("Octopus.EF.Data.Entities.StatsHomeAwayTotal", "Played", b1 =>
                        {
                            b1.Property<int>("TeamStatsId")
                                .HasColumnType("int");

                            b1.Property<int>("Away")
                                .HasColumnType("int");

                            b1.Property<int>("Home")
                                .HasColumnType("int");

                            b1.Property<int>("Id")
                                .HasColumnType("int");

                            b1.Property<int>("Total")
                                .HasColumnType("int");

                            b1.HasKey("TeamStatsId");

                            b1.ToTable("TeamStats");

                            b1.WithOwner()
                                .HasForeignKey("TeamStatsId");
                        });

                    b.OwnsOne("Octopus.EF.Data.Entities.StatsHomeAwayTotal", "Wins", b1 =>
                        {
                            b1.Property<int>("TeamStatsId")
                                .HasColumnType("int");

                            b1.Property<int>("Away")
                                .HasColumnType("int");

                            b1.Property<int>("Home")
                                .HasColumnType("int");

                            b1.Property<int>("Id")
                                .HasColumnType("int");

                            b1.Property<int>("Total")
                                .HasColumnType("int");

                            b1.HasKey("TeamStatsId");

                            b1.ToTable("TeamStats");

                            b1.WithOwner()
                                .HasForeignKey("TeamStatsId");
                        });

                    b.Navigation("Biggest")
                        .IsRequired();

                    b.Navigation("CleanSheets")
                        .IsRequired();

                    b.Navigation("Draws")
                        .IsRequired();

                    b.Navigation("FailedToScore")
                        .IsRequired();

                    b.Navigation("Goals")
                        .IsRequired();

                    b.Navigation("League");

                    b.Navigation("Losses")
                        .IsRequired();

                    b.Navigation("Penalties")
                        .IsRequired();

                    b.Navigation("Played")
                        .IsRequired();

                    b.Navigation("Season");

                    b.Navigation("Team");

                    b.Navigation("Wins")
                        .IsRequired();
                });

            modelBuilder.Entity("Octopus.EF.Data.Entities.Country", b =>
                {
                    b.Navigation("Leagues");
                });

            modelBuilder.Entity("Octopus.EF.Data.Entities.Fixture", b =>
                {
                    b.Navigation("Stats")
                        .IsRequired();
                });

            modelBuilder.Entity("Octopus.EF.Data.Entities.FixtureLineup", b =>
                {
                    b.Navigation("StartXI");

                    b.Navigation("Substitutes");
                });

            modelBuilder.Entity("Octopus.EF.Data.Entities.League", b =>
                {
                    b.Navigation("Seasons");
                });

            modelBuilder.Entity("Octopus.EF.Data.Entities.Player", b =>
                {
                    b.Navigation("Statistics");
                });

            modelBuilder.Entity("Octopus.EF.Data.Entities.Season", b =>
                {
                    b.Navigation("SeasonCoverage")
                        .IsRequired();
                });

            modelBuilder.Entity("Octopus.EF.Data.Entities.Team", b =>
                {
                    b.Navigation("TeamStats");
                });

            modelBuilder.Entity("Octopus.EF.Data.Entities.TeamStats", b =>
                {
                    b.Navigation("Formations");
                });
#pragma warning restore 612, 618
        }
    }
}
